!function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}var n=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var n,r;return n=e,(r=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"_getInitialCard",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"_getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"getInitialInfo",value:function(){return Promise.all([this._getInitialCard(),this._getUserInfo()])}},{key:"setUserPicture",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",body:JSON.stringify({avatar:e}),headers:this._headers}).then(this._checkResponse)}},{key:"setUserInfo",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",body:JSON.stringify({name:e.name,about:e.title}),headers:this._headers}).then(this._checkResponse)}},{key:"postCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",body:JSON.stringify(e),headers:this._headers}).then(this._checkResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"dislikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var i=function(){function e(t,n,r){var o=t.handleCardClick,i=t.handleDeleteClick,u=t.handleLikeClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n.name,this._link=n.link,this._likes=n.likes,this._owner=n.owner,this._cardSelector=r,this._handleCardClick=o,this._handleDeleteClick=i,this._handleLikeClick=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element__item").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._image=this._element.querySelector(".element__image"),this._imageText=this._element.querySelector(".element__text"),this._cardLikes=this._element.querySelector(".element__like-counts"),this._image.src=this._link,this._image.alt=this._name,this._imageText.textContent=this._name,this._cardLikes.textContent=this._likes.length,this._setEventListeners(),this._initialLikeState(),this._element}},{key:"deleteCard",value:function(e){e.target.closest(".element__item").remove()}},{key:"toggleLike",value:function(){this._heartButton=this._element.querySelector(".element__heart-btn"),this._cardLikes=this._element.querySelector(".element__like-counts"),this._heartButton.classList.toggle("element__heart-btn_active"),this._cardLikes.textContent=this._likes.length}},{key:"_initialLikeState",value:function(){this.isLiked()?this._heartButton.classList.add("element__heart-btn_active"):this._heartButton.classList.remove("element__heart-btn_active")}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._owner._id}))}},{key:"_setEventListeners",value:function(){this._heartButton=this._element.querySelector(".element__heart-btn"),this._deleteButton=this._element.querySelector(".element__delete-btn"),this._heartButton.addEventListener("click",this._handleLikeClick),this._deleteButton.addEventListener("click",this._handleDeleteClick),this._image.addEventListener("click",this._handleCardClick)}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==u(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===u(o)?o:String(o)),r)}var o}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formInputSelector=t.formInputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inputErrorModifier=t.inputErrorModifier,this._errorModifier=t.errorModifier,this._buttonErrorModifier=t.buttonErrorModifier,this._formElement=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._errorModifier),t.classList.add(this._inputErrorModifier),t.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._errorModifier),t.classList.remove(this._inputErrorModifier),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInputInvalid",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInputInvalid()?(this._button.classList.add(this._buttonErrorModifier),this._button.disabled=!0):(this._button.classList.remove(this._buttonErrorModifier),this._button.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._formInputSelector)),this._button=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),a={formInputSelector:".form__input",submitButtonSelector:".btn__submit",inputErrorModifier:"form__input-error",errorModifier:"form__input_type_error",buttonErrorModifier:"btn_inactive"},s=document.querySelector(".profile__username"),f=document.querySelector(".profile__about"),h=document.querySelector(".content"),y=document.querySelector(".main-content"),d=document.querySelector(".btn_edit"),p=document.querySelector(".btn_add"),m=document.querySelector(".profile__picture"),b=document.querySelector(".profile__picture-edit"),v=".content",_=function(){var e=window.innerWidth-document.documentElement.clientWidth;y.classList.toggle("main-content_disabled"),h.style.overflow="hidden"===h.style.overflow?"auto":"hidden",h.style.width="calc(100% - ".concat(e,"px)")};function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==g(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==g(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===g(o)?o:String(o)),r)}var o}var k=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return this._class=this._popup.replace("#",".").replace("-template",""),this._popupElement=document.querySelector(this._popup).content.querySelector(this._class).cloneNode(!0),this._popupElement}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&document.contains(this._element)&&this.close()}},{key:"_handleClickOutClose",value:function(e){this._element.contains(e.target)||this.close()}},{key:"open",value:function(){var e=this;return this._element=this._getTemplate(),setTimeout((function(){_(),e._setEventListeners(),e._element.classList.toggle("popup")}),100),this._element}},{key:"close",value:function(){_(),this._removeEventListeners(),this._element.remove()}},{key:"_setEventListeners",value:function(){var e=this;this._closeButton=this._element.querySelector(".btn__close"),this._handleEscCloseFn=function(t){return e._handleEscClose(t)},this._handleClickOutCloseFn=function(t){return e._handleClickOutClose(t)},this._closeButton.addEventListener("click",(function(){return e.close()})),document.addEventListener("keydown",this._handleEscCloseFn),document.addEventListener("mousedown",this._handleClickOutCloseFn)}},{key:"_removeEventListeners",value:function(){document.removeEventListener("keydown",this._handleEscCloseFn),document.removeEventListener("mousedown",this._handleClickOutCloseFn)}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==w(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==w(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===w(o)?o:String(o)),r)}var o}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function j(e,t){return j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},j(e,t)}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&j(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(r);if(o){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===w(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n,r=e.handleEventSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t))._handleEventSubmit=r,n}return t=u,(n=[{key:"_setEventListeners",value:function(){O(P(u.prototype),"_setEventListeners",this).call(this),this._yesButton=this._element.querySelector(".btn__submit"),this._yesButton.addEventListener("click",this._handleEventSubmit)}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(k);function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==L(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==L(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===L(o)?o:String(o)),r)}var o}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},T.apply(this,arguments)}function R(e,t){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},R(e,t)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&R(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n,r=e.handleEventSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t))._handleEventSubmit=r,n}return t=u,(n=[{key:"renderLoading",value:function(e,t){this._element.querySelector(".btn__submit").textContent=e?"Menyimpan...":t}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},Array.from(this._element.querySelectorAll(".form__input")).forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"_setEventListeners",value:function(){var e=this;T(q(u.prototype),"_setEventListeners",this).call(this),this._element.addEventListener("submit",(function(t){t.preventDefault(),e._handleEventSubmit(e._getInputValues())}))}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(k);function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==B(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===B(o)?o:String(o)),r)}var o}function A(){return A="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=D(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},A.apply(this,arguments)}function M(e,t){return M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},M(e,t)}function D(e){return D=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},D(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&M(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=D(r);if(o){var n=D(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t))._image=e.src,n._text=e.alt,n}return t=u,(n=[{key:"open",value:function(){return A(D(u.prototype),"open",this).call(this),this._element.querySelector(".show-picture__image").src=this._image,this._element.querySelector(".show-picture__image").alt=this._text,this._element.querySelector(".show-picture__text").textContent=this._text,this._element}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(k);function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==N(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==N(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===N(o)?o:String(o)),r)}var o}var H=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;Array.isArray(this._renderedItems)?this._renderedItems.forEach((function(t){e._renderer(t)})):this._renderer(this._renderedItems)}}])&&F(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==J(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===J(o)?o:String(o)),r)}var o}var W=function(){function e(t){var n=t.userName,r=t.userAbout;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=n,this._userAbout=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,about:this._userAbout.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;this._userName.textContent=t,this._userAbout.textContent=n}}])&&G(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $,K=new n({baseUrl:"https://around.nomoreparties.co/v1/web_idn_02",headers:{authorization:"008c1c55-3b56-46f6-9605-a10cac4bcdce","Content-Type":"application/json"}});K.getInitialInfo().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,u,c=[],l=!0,a=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);l=!0);}catch(e){a=!0,o=e}finally{try{if(!l&&null!=n.return&&(u=n.return(),Object(u)!==u))return}finally{if(a)throw o}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],u=r[1];m.src=u.avatar,Q.setUserInfo({name:u.name,about:u.about}),($=new H({items:o,renderer:function(e){var t=new i({handleCardClick:function(e){te(e)},handleDeleteClick:function(n){ee(e,t,n)},handleLikeClick:function(){!1===t.isLiked()?(e.likes.push(u),t.toggleLike(),K.likeCard(e._id).then().catch((function(e){console.log(e)}))):(e.likes.pop(),t.toggleLike(),K.dislikeCard(e._id).then().catch((function(e){console.log(e)})))}},e,"#card-template"),n=t.generateCard();$.addItem(n)}},".element")).clear(),$.renderItems()})).catch((function(e){console.log(e)}));var Q=new W({userName:s,userAbout:f}),X=new H({items:"#profile-picture-template",renderer:function(e){var t=new x({handleEventSubmit:function(e){t.renderLoading(!0),K.setUserPicture(e.link).then((function(e){m.src=e.avatar})).catch((function(e){console.log(e)})).finally((function(){t.renderLoading(!1,"Simpan"),t.close()}))}},e),n=t.open();new l(a,n).enableValidation(),X.addItem(n)}},v),Y=new H({items:"#edit-profile-template",renderer:function(e){var t=new x({handleEventSubmit:function(e){t.renderLoading(!0),Q.setUserInfo({name:e.name,about:e.title}),K.setUserInfo(e).then((function(){})).catch((function(e){console.log(e)})).finally((function(){t.renderLoading(!1,"Simpan"),t.close()}))}},e),n=t.open(),r=Q.getUserInfo(),o=n.querySelector('input[name="name"]'),i=n.querySelector('input[name="title"]');new l(a,n).enableValidation(),setTimeout((function(){o.value=r.name,i.value=r.about}),100),Y.addItem(n)}},v),Z=new H({items:"#add-card-template",renderer:function(e){var t=new x({handleEventSubmit:function(e){t.renderLoading(!0);var n={name:e.title,link:e.link};K.postCard(n).then((function(e){$._renderedItems.unshift(e),$.clear(),$.renderItems()})).catch((function(e){console.log(e)})).finally((function(){t.renderLoading(!1,"Simpan"),t.close()}))}},e),n=t.open();new l(a,n).enableValidation(),Z.addItem(n)}},v),ee=function(e,t,n){var r=new H({items:"#del-confirm-template",renderer:function(o){var i=new C({handleEventSubmit:function(){t.deleteCard(n),K.deleteCard(e._id).then().catch((function(e){console.log(e)})),i.close()}},o),u=i.open();r.addItem(u)}},v);r.renderItems()},te=function(e){var t=new H({items:e.target,renderer:function(e){var n=new V(e,"#show-picture-template").open();t.addItem(n)}},v);t.renderItems()};m.addEventListener("click",(function(){X.renderItems()})),d.addEventListener("click",(function(){Y.renderItems()})),p.addEventListener("click",(function(){Z.renderItems()})),m.addEventListener("mouseover",(function(){b.style.display="block"})),m.addEventListener("mouseout",(function(){b.style.display="none"}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,